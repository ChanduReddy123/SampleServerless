
service: serverlessdemo
plugins:
  - serverless-deployment-bucket
  - serverless-pseudo-parameters
# app and org for use with dashboard.serverless.com
# app: serverlessdemo
# org: chandureddy123

provider:
  name: aws
  runtime: nodejs10.x
  deploymentBucket:
    name: serverlesschandu
    serverSideEncryption: AES256
  apiName: serverlessdemo
# you can overwrite defaults here
  stage: dev
  region: us-west-2
  # role: arn:aws:iam::797118203836:role/lambda_basic_execution

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:service}_users_data_${opt:stage}

  environment:
    TableName: ${self:service}_users_data_${opt:stage}
    Environment: Dev

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  usercreate:
    handler: users.create
    events:
      - http:
            path: /user/create
            method: post
  userget:
    handler: users.list
    events:
      - http:
            path: /user/get
            method: get
  userdel:
    handler: users.delete
    events:
      - http:
          path: /user/delete
          method: post
  userupdate:
    handler: users.update
    events:
      - http:
          path: /user/update
          method: post

#    The following are a few example eventss you can configure
#    NOTE: Please make sure to change your handler code to work with those eventss
#    Check the events documentation for details
#    eventss:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvents:
#          events:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2


resources:
  Resources:
    UserData:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}_users_data_${opt:stage}
        AttributeDefinitions:
           - AttributeName: Name
             AttributeType: S
        BillingMode: 'PAY_PER_REQUEST'
        KeySchema:
          - AttributeName: Name
            KeyType: HASH
        Tags:
          - Key: 'Owner'
            Value: 'ChanduReddy'
          - Key: 'Environment'
            Value: 'Dev' 
      